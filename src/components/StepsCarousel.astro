---
interface Step {
  number: number;
  image: string;
  title: string;
  description: string;
}

const steps: Step[] = [
  {
    number: 1,
    image: "/images/contactanos.webp",
    title: "Hablanos por WhatsApp",
    description: "A través del chat se gestionarán tus cargas y retiros automáticamente."
  },
  {
    number: 2,
    image: "/images/crear-usuario.webp",
    title: "Creá tu Usuario",
    description: "Tocá en el botón de crear tu usuario y obtené tu cuenta en segundos."
  },
  {
    number: 3,
    image: "/images/fichas-cargadas.webp",
    title: "Bono Activado",
    description: "Tu bono de bienvenida ya estará activo. Envía tu comprobante de carga y ya podes empezar a ganar."
  }
];
---

<div class="relative w-full overflow-hidden py-4 max-w-3xl mx-auto">
  <!-- Carrusel Container -->
  <div class="flex gap-8 overflow-x-hidden snap-x snap-mandatory scrollbar-hide" id="stepsCarousel">
    {steps.map((step) => (
      <div 
        class="flex-none w-full snap-center relative bg-black/30 backdrop-blur-sm border border-[#e6c656]/20 rounded-2xl p-8 pt-10 transform transition-all duration-300 group"
        data-step-index={step.number - 1}
      >
        <!-- Numeración -->
        <div class="absolute -top-4 -left-4 w-12 h-12 rounded-full bg-gradient-to-r from-[#e6c656] to-[#d4af37] flex items-center justify-center text-black font-heading text-xl z-10 shadow-md">
          {step.number}
        </div>
        
        <!-- Contenido -->
        <div class="flex flex-col md:flex-row gap-6 items-center">
          <!-- Contenedor para la imagen -->
          <div class="w-full md:w-1/2 flex items-center justify-center bg-black/20 rounded-xl overflow-hidden mb-4 md:mb-0">
            <img
              src={step.image}
              alt={`Paso ${step.number}: ${step.title}`}
              class="w-full h-auto object-cover rounded-xl"
            />
          </div>
          
          <!-- Texto del paso -->
          <div class="w-full md:w-1/2 flex flex-col justify-center">
            <h3 class="font-heading text-2xl mb-4 text-white group-hover:text-[#e6c656] transition-colors">
              {step.title}
            </h3>
            <p class="text-gray-400 text-lg">
              {step.description}
            </p>
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Indicador de pasos -->
  <div class="flex justify-center items-center gap-3 mt-8">
    {steps.map((step, index) => (
      <button 
        class="w-3 h-3 rounded-full bg-white/20 transition-all data-[active=true]:bg-[#e6c656] data-[active=true]:w-6"
        data-step-dot={index}
        data-active={index === 0}
        aria-label={`Ir al paso ${step.number}`}
      ></button>
    ))}
  </div>

  <!-- Controles de navegación -->
  <button 
    class="absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 backdrop-blur-sm p-3 rounded-full border border-[#e6c656]/20 text-[#e6c656] hover:bg-[#e6c656]/10 transition-all z-10"
    id="prevStepBtn"
    aria-label="Paso anterior"
  >
    ←
  </button>
  <button 
    class="absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 backdrop-blur-sm p-3 rounded-full border border-[#e6c656]/20 text-[#e6c656] hover:bg-[#e6c656]/10 transition-all z-10"
    id="nextStepBtn"
    aria-label="Siguiente paso"
  >
    →
  </button>
</div>

<script>
  const carousel = document.getElementById('stepsCarousel');
  const prevBtn = document.getElementById('prevStepBtn');
  const nextBtn = document.getElementById('nextStepBtn');
  const dots = document.querySelectorAll('[data-step-dot]');
  const totalSteps = document.querySelectorAll('[data-step-index]').length;
  
  if (carousel && prevBtn && nextBtn) {
    let currentIndex = 0;
    
    // Función para actualizar los indicadores
    const updateIndicators = (index: number) => {
      dots.forEach((dot, i) => {
        dot.setAttribute('data-active', (i === index).toString());
      });
    };

    // Función para desplazarse a un índice específico
    const scrollToIndex = (index: number) => {
      if (!carousel) return;
      
      const targetItem = document.querySelector(`[data-step-index="${index}"]`);
      if (targetItem) {
        carousel.scrollTo({
          left: targetItem.getBoundingClientRect().left + carousel.scrollLeft - carousel.getBoundingClientRect().left,
          behavior: 'smooth'
        });
        
        currentIndex = index;
        updateIndicators(currentIndex);
      }
    };

    // Event listeners para botones
    prevBtn.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + totalSteps) % totalSteps;
      scrollToIndex(currentIndex);
    });

    nextBtn.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % totalSteps;
      scrollToIndex(currentIndex);
    });

    // Event listeners para indicadores
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        scrollToIndex(index);
      });
    });

    // Detección de swipe en móviles
    let touchStartX = 0;
    let touchEndX = 0;
    
    const handleSwipe = () => {
      const swipeThreshold = 50; // Umbral mínimo para considerar un swipe
      
      if (touchStartX - touchEndX > swipeThreshold) {
        // Swipe a la izquierda (siguiente)
        currentIndex = (currentIndex + 1) % totalSteps;
        scrollToIndex(currentIndex);
      } else if (touchEndX - touchStartX > swipeThreshold) {
        // Swipe a la derecha (anterior)
        currentIndex = (currentIndex - 1 + totalSteps) % totalSteps;
        scrollToIndex(currentIndex);
      }
    };
    
    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    carousel.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });

    // Autoplay
    let autoplayInterval: number;
    
    const startAutoplay = () => {
      autoplayInterval = setInterval(() => {
        currentIndex = (currentIndex + 1) % totalSteps;
        scrollToIndex(currentIndex);
      }, 5000) as unknown as number;
    };

    const stopAutoplay = () => {
      clearInterval(autoplayInterval);
    };

    startAutoplay();

    carousel.addEventListener('mouseenter', stopAutoplay);
    carousel.addEventListener('touchstart', stopAutoplay);

    carousel.addEventListener('mouseleave', startAutoplay);
    carousel.addEventListener('touchend', () => {
      setTimeout(startAutoplay, 1000);
    });

    // Para asegurarnos de que el carrusel comienza en el primer elemento
    setTimeout(() => {
      scrollToIndex(0);
    }, 100);
  }
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style> 