---
interface Step {
  number: number;
  image: string;
}

const steps: Step[] = [
  {
    number: 1,
    image: "/images/Joker 1.webp"
  },
  {
    number: 2,
    image: "/images/Joker 2.webp"
  },
  {
    number: 3,
    image: "/images/Joker 3.webp"
  }
];
---

<div class="relative w-full py-12 max-w-3xl mx-auto">
  <!-- Numeración (ahora completamente fuera del carrusel) -->
  <div id="stepNumbers" class="absolute top-0 left-0 w-full z-30 pointer-events-none">
    {steps.map((step, index) => (
      <div 
        data-step-number={index}
        data-active={index === 0}
        class="absolute left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-14 h-14 md:w-20 md:h-20 rounded-full bg-gradient-to-r from-[#e6c656] to-[#d4af37] flex items-center justify-center text-black font-heading text-2xl md:text-4xl font-bold shadow-xl border-2 md:border-3 border-black/20 transition-opacity opacity-0 data-[active=true]:opacity-100"
      >
        {step.number}
      </div>
    ))}
  </div>
  
  <!-- Carrusel Container -->
  <div class="relative overflow-hidden rounded-2xl mt-4">
    <div class="flex gap-8 overflow-x-hidden snap-x snap-mandatory scrollbar-hide" id="stepsCarousel">
      {steps.map((step) => (
        <div 
          class="flex-none w-full snap-center relative bg-black/30 backdrop-blur-sm border border-[#e6c656]/20 rounded-2xl p-6 transform transition-all duration-300 group"
          data-step-index={step.number - 1}
        >
          <!-- Contenedor para la imagen -->
          <div class="flex items-center justify-center bg-black/20 rounded-xl overflow-hidden mx-auto max-w-md md:max-w-lg">
            <img
              src={step.image}
              alt={`Paso ${step.number}`}
              class="w-full h-auto object-contain rounded-xl !important"
              style="border-radius: 0.75rem;"
            />
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Indicador de pasos -->
  <div class="flex justify-center items-center gap-3 mt-8">
    {steps.map((step, index) => (
      <button 
        class="w-3 h-3 rounded-full bg-white/20 transition-all data-[active=true]:bg-[#e6c656] data-[active=true]:w-6"
        data-step-dot={index}
        data-active={index === 0}
        aria-label={`Ir al paso ${step.number}`}
      ></button>
    ))}
  </div>
</div>

<script>
  const carousel = document.getElementById('stepsCarousel');
  const dots = document.querySelectorAll('[data-step-dot]');
  const stepNumbers = document.querySelectorAll('[data-step-number]');
  const totalSteps = document.querySelectorAll('[data-step-index]').length;
  
  if (carousel) {
    let currentIndex = 0;
    let autoplayInterval: number | undefined;
    
    // Función para actualizar los indicadores y números
    const updateIndicators = (index: number) => {
      // Actualizar los puntos indicadores
      dots.forEach((dot, i) => {
        dot.setAttribute('data-active', (i === index).toString());
      });
      
      // Actualizar la visibilidad de los números
      stepNumbers.forEach((number, i) => {
        number.setAttribute('data-active', (i === index).toString());
      });
    };

    // Función para desplazarse a un índice específico
    const scrollToIndex = (index: number) => {
      if (!carousel) return;
      
      const targetItem = document.querySelector(`[data-step-index="${index}"]`);
      if (targetItem) {
        carousel.scrollTo({
          left: targetItem.getBoundingClientRect().left + carousel.scrollLeft - carousel.getBoundingClientRect().left,
          behavior: 'smooth'
        });
        
        currentIndex = index;
        updateIndicators(currentIndex);
      }
    };

    // Función para iniciar el autoplay
    const startAutoplay = () => {
      if (autoplayInterval) return;
      
      autoplayInterval = setInterval(() => {
        currentIndex = (currentIndex + 1) % totalSteps;
        scrollToIndex(currentIndex);
      }, 2500); // Cambia cada 2.5 segundos
    };
    
    // Función para detener el autoplay
    const stopAutoplay = () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        autoplayInterval = undefined;
      }
    };

    // Event listeners para indicadores
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        scrollToIndex(index);
        // Reinicia el autoplay después de la interacción manual
        stopAutoplay();
        startAutoplay();
      });
    });

    // Detección de swipe en móviles
    let touchStartX = 0;
    let touchEndX = 0;
    
    const handleSwipe = () => {
      const swipeThreshold = 50; // Umbral mínimo para considerar un swipe
      
      if (touchStartX - touchEndX > swipeThreshold) {
        // Swipe a la izquierda (siguiente)
        currentIndex = (currentIndex + 1) % totalSteps;
        scrollToIndex(currentIndex);
      } else if (touchEndX - touchStartX > swipeThreshold) {
        // Swipe a la derecha (anterior)
        currentIndex = (currentIndex - 1 + totalSteps) % totalSteps;
        scrollToIndex(currentIndex);
      }
      
      // Reinicia el autoplay después de la interacción manual
      stopAutoplay();
      startAutoplay();
    };
    
    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
      // Pausa el autoplay mientras se interactúa
      stopAutoplay();
    });
    
    carousel.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    
    // Pausar autoplay cuando el usuario interactúa con el carrusel
    carousel.addEventListener('mouseenter', stopAutoplay);
    
    // Reanudar autoplay cuando el usuario deja de interactuar
    carousel.addEventListener('mouseleave', startAutoplay);

    // Para asegurarnos de que el carrusel comienza en el primer elemento
    setTimeout(() => {
      scrollToIndex(0);
      // Iniciar el autoplay
      startAutoplay();
    }, 100);
    
    // Limpiar el intervalo cuando se desmonta el componente
    document.addEventListener('astro:page-load', startAutoplay);
    document.addEventListener('astro:before-swap', stopAutoplay);
  }
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  /* Asegurar que las imágenes tengan esquinas redondeadas en todos los navegadores */
  img {
    border-radius: 0.75rem;
  }
</style> 